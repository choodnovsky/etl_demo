[2023-04-30 06:06:11,693] {taskinstance.py:1159} INFO - Dependencies all met for <TaskInstance: dag_etl.create_nds_tables_if_not_exists scheduled__2023-04-27T00:00:00+00:00 [queued]>
[2023-04-30 06:06:12,430] {taskinstance.py:1159} INFO - Dependencies all met for <TaskInstance: dag_etl.create_nds_tables_if_not_exists scheduled__2023-04-27T00:00:00+00:00 [queued]>
[2023-04-30 06:06:12,434] {taskinstance.py:1356} INFO - 
--------------------------------------------------------------------------------
[2023-04-30 06:06:12,452] {taskinstance.py:1357} INFO - Starting attempt 1 of 6
[2023-04-30 06:06:12,457] {taskinstance.py:1358} INFO - 
--------------------------------------------------------------------------------
[2023-04-30 06:06:13,698] {taskinstance.py:1377} INFO - Executing <Task(PostgresOperator): create_nds_tables_if_not_exists> on 2023-04-27 00:00:00+00:00
[2023-04-30 06:06:13,766] {standard_task_runner.py:52} INFO - Started process 762 to run task
[2023-04-30 06:06:13,943] {standard_task_runner.py:79} INFO - Running: ['***', 'tasks', 'run', 'dag_etl', 'create_nds_tables_if_not_exists', 'scheduled__2023-04-27T00:00:00+00:00', '--job-id', '10', '--raw', '--subdir', 'DAGS_FOLDER/dag_etl_taskflow.py', '--cfg-path', '/tmp/tmpc4kvvxb0', '--error-file', '/tmp/tmpdyn54_ts']
[2023-04-30 06:06:14,038] {standard_task_runner.py:80} INFO - Job 10: Subtask create_nds_tables_if_not_exists
[2023-04-30 06:06:16,298] {task_command.py:370} INFO - Running <TaskInstance: dag_etl.create_nds_tables_if_not_exists scheduled__2023-04-27T00:00:00+00:00 [running]> on host 295d97741f96
[2023-04-30 06:06:24,884] {taskinstance.py:1571} INFO - Exporting the following env vars:
AIRFLOW_CTX_DAG_OWNER=Victor
AIRFLOW_CTX_DAG_ID=dag_etl
AIRFLOW_CTX_TASK_ID=create_nds_tables_if_not_exists
AIRFLOW_CTX_EXECUTION_DATE=2023-04-27T00:00:00+00:00
AIRFLOW_CTX_TRY_NUMBER=1
AIRFLOW_CTX_DAG_RUN_ID=scheduled__2023-04-27T00:00:00+00:00
[2023-04-30 06:06:25,453] {base.py:68} INFO - Using connection ID 'postgres_conn' for task execution.
[2023-04-30 06:06:25,859] {dbapi.py:213} INFO - Running statement: 
            CREATE SCHEMA IF NOT EXISTS nds;
            CREATE SCHEMA IF NOT EXISTS stage;
    
            SET search_path TO nds;
            
            --// создаем таблицу время //--
            CREATE TABLE IF NOT EXISTS dim_time(
            time TIME NOT NULL,
            day_part VARCHAR(15) NOT NULL);
            
            --// создаем таблицу с датами //--
            CREATE TABLE IF NOT EXISTS dim_date(
            date DATE NOT NULL,
            week_of_year INT NOT NULL,
            week_start DATE NOT NULL,
            month_number INT NOT NULL,
            month_name VARCHAR(15) NOT NULL,
            quarter INT NOT NULL,
            year INT NOT NULL,
            season VARCHAR(15) NOT NULL);
            
            --// создаем таблицу с ветками //--
            CREATE TABLE IF NOT EXISTS dim_branch(
            id SERIAL PRIMARY KEY,
            branch VARCHAR(100) NOT NULL);
            
            --// создаем таблицу с городами //--
            CREATE TABLE IF NOT EXISTS dim_city(
            id SERIAL PRIMARY KEY,
            city VARCHAR(100) NOT NULL);
            
            --// создаем таблицу с типами клиентов //--
            CREATE TABLE IF NOT EXISTS dim_customer_type(
            id SERIAL PRIMARY KEY,
            customer_type VARCHAR(200) NOT NULL);
            
            --// создаем таблицу с гендерами //--
            CREATE TABLE IF NOT EXISTS dim_gender(
            id SERIAL PRIMARY KEY,
            gender VARCHAR(200) NOT NULL);
            
            --// создаем таблицу с продуктовыми линейками //--
            CREATE TABLE IF NOT EXISTS dim_product_line(
            id SERIAL PRIMARY KEY,
            product_line VARCHAR(200) NOT NULL);
            
            --// создаем таблицу с видами оплат //--
            CREATE TABLE IF NOT EXISTS dim_payment(
            id SERIAL PRIMARY KEY,
            payment VARCHAR(100) NOT NULL);
            
            --// создаем таблицу с фактами //--       
            CREATE TABLE IF NOT EXISTS fact_sales(
            invoice_id VARCHAR(15) PRIMARY KEY,
            branch INT NOT NULL REFERENCES dim_branch(id),
            city INT NOT NULL REFERENCES dim_city(id),
            customer_type INT NOT NULL REFERENCES dim_customer_type(id),
            gender INT NOT NULL REFERENCES dim_gender(id),
            product_line INT NOT NULL REFERENCES dim_product_line(id),
            unit_price DOUBLE PRECISION,
            quantity DOUBLE PRECISION,
            "tax_5%" DOUBLE PRECISION,
            total DOUBLE PRECISION,
            date DATE NOT NULL,
            time TIME NOT NULL,
            payment INT NOT NULL REFERENCES dim_payment(id),
            cogs DOUBLE PRECISION,
            gross_margin_percentage DOUBLE PRECISION,
            gross_income DOUBLE PRECISION,
            rating DOUBLE PRECISION);        
        , parameters: None
[2023-04-30 06:06:25,946] {postgres.py:94} INFO - NOTICE:  schema "nds" already exists, skipping

[2023-04-30 06:06:25,953] {postgres.py:94} INFO - NOTICE:  schema "stage" already exists, skipping

[2023-04-30 06:06:25,966] {postgres.py:94} INFO - NOTICE:  relation "dim_time" already exists, skipping

[2023-04-30 06:06:25,969] {postgres.py:94} INFO - NOTICE:  relation "dim_date" already exists, skipping

[2023-04-30 06:06:25,970] {postgres.py:94} INFO - NOTICE:  relation "dim_branch" already exists, skipping

[2023-04-30 06:06:25,972] {postgres.py:94} INFO - NOTICE:  relation "dim_city" already exists, skipping

[2023-04-30 06:06:25,973] {postgres.py:94} INFO - NOTICE:  relation "dim_customer_type" already exists, skipping

[2023-04-30 06:06:25,974] {postgres.py:94} INFO - NOTICE:  relation "dim_gender" already exists, skipping

[2023-04-30 06:06:25,985] {postgres.py:94} INFO - NOTICE:  relation "dim_product_line" already exists, skipping

[2023-04-30 06:06:25,986] {postgres.py:94} INFO - NOTICE:  relation "dim_payment" already exists, skipping

[2023-04-30 06:06:25,987] {postgres.py:94} INFO - NOTICE:  relation "fact_sales" already exists, skipping

[2023-04-30 06:06:28,988] {taskinstance.py:1400} INFO - Marking task as SUCCESS. dag_id=dag_etl, task_id=create_nds_tables_if_not_exists, execution_date=20230427T000000, start_date=20230430T060611, end_date=20230430T060628
[2023-04-30 06:06:30,059] {local_task_job.py:156} INFO - Task exited with return code 0
[2023-04-30 06:06:32,550] {local_task_job.py:273} INFO - 2 downstream tasks scheduled from follow-on schedule check
[2023-04-30 07:02:42,082] {taskinstance.py:1159} INFO - Dependencies all met for <TaskInstance: dag_etl.create_nds_tables_if_not_exists scheduled__2023-04-27T00:00:00+00:00 [queued]>
[2023-04-30 07:02:42,331] {taskinstance.py:1159} INFO - Dependencies all met for <TaskInstance: dag_etl.create_nds_tables_if_not_exists scheduled__2023-04-27T00:00:00+00:00 [queued]>
[2023-04-30 07:02:42,337] {taskinstance.py:1356} INFO - 
--------------------------------------------------------------------------------
[2023-04-30 07:02:42,343] {taskinstance.py:1357} INFO - Starting attempt 1 of 6
[2023-04-30 07:02:42,344] {taskinstance.py:1358} INFO - 
--------------------------------------------------------------------------------
[2023-04-30 07:02:42,848] {taskinstance.py:1377} INFO - Executing <Task(PostgresOperator): create_nds_tables_if_not_exists> on 2023-04-27 00:00:00+00:00
[2023-04-30 07:02:42,874] {standard_task_runner.py:52} INFO - Started process 856 to run task
[2023-04-30 07:02:42,950] {standard_task_runner.py:79} INFO - Running: ['***', 'tasks', 'run', 'dag_etl', 'create_nds_tables_if_not_exists', 'scheduled__2023-04-27T00:00:00+00:00', '--job-id', '54', '--raw', '--subdir', 'DAGS_FOLDER/dag_etl_taskflow.py', '--cfg-path', '/tmp/tmpwoy0ekfa', '--error-file', '/tmp/tmp9ntioead']
[2023-04-30 07:02:42,962] {standard_task_runner.py:80} INFO - Job 54: Subtask create_nds_tables_if_not_exists
[2023-04-30 07:02:44,468] {task_command.py:370} INFO - Running <TaskInstance: dag_etl.create_nds_tables_if_not_exists scheduled__2023-04-27T00:00:00+00:00 [running]> on host 295d97741f96
[2023-04-30 07:02:46,997] {taskinstance.py:1571} INFO - Exporting the following env vars:
AIRFLOW_CTX_DAG_OWNER=Victor
AIRFLOW_CTX_DAG_ID=dag_etl
AIRFLOW_CTX_TASK_ID=create_nds_tables_if_not_exists
AIRFLOW_CTX_EXECUTION_DATE=2023-04-27T00:00:00+00:00
AIRFLOW_CTX_TRY_NUMBER=1
AIRFLOW_CTX_DAG_RUN_ID=scheduled__2023-04-27T00:00:00+00:00
[2023-04-30 07:02:47,185] {base.py:68} INFO - Using connection ID 'postgres_conn' for task execution.
[2023-04-30 07:02:47,255] {dbapi.py:213} INFO - Running statement: 
            CREATE SCHEMA IF NOT EXISTS nds;
            CREATE SCHEMA IF NOT EXISTS stage;
    
            SET search_path TO nds;
            
            --// создаем таблицу время //--
            CREATE TABLE IF NOT EXISTS dim_time(
            time TIME NOT NULL,
            day_part VARCHAR(15) NOT NULL);
            
            --// создаем таблицу с датами //--
            CREATE TABLE IF NOT EXISTS dim_date(
            date DATE NOT NULL,
            week_of_year INT NOT NULL,
            week_start DATE NOT NULL,
            month_number INT NOT NULL,
            month_name VARCHAR(15) NOT NULL,
            quarter INT NOT NULL,
            year INT NOT NULL,
            season VARCHAR(15) NOT NULL);
            
            --// создаем таблицу с ветками //--
            CREATE TABLE IF NOT EXISTS dim_branch(
            id SERIAL PRIMARY KEY,
            branch VARCHAR(100) NOT NULL);
            
            --// создаем таблицу с городами //--
            CREATE TABLE IF NOT EXISTS dim_city(
            id SERIAL PRIMARY KEY,
            city VARCHAR(100) NOT NULL);
            
            --// создаем таблицу с типами клиентов //--
            CREATE TABLE IF NOT EXISTS dim_customer_type(
            id SERIAL PRIMARY KEY,
            customer_type VARCHAR(200) NOT NULL);
            
            --// создаем таблицу с гендерами //--
            CREATE TABLE IF NOT EXISTS dim_gender(
            id SERIAL PRIMARY KEY,
            gender VARCHAR(200) NOT NULL);
            
            --// создаем таблицу с продуктовыми линейками //--
            CREATE TABLE IF NOT EXISTS dim_product_line(
            id SERIAL PRIMARY KEY,
            product_line VARCHAR(200) NOT NULL);
            
            --// создаем таблицу с видами оплат //--
            CREATE TABLE IF NOT EXISTS dim_payment(
            id SERIAL PRIMARY KEY,
            payment VARCHAR(100) NOT NULL);
            
            --// создаем таблицу с фактами //--       
            CREATE TABLE IF NOT EXISTS fact_sales(
            invoice_id VARCHAR(15) PRIMARY KEY,
            branch INT NOT NULL REFERENCES dim_branch(id),
            city INT NOT NULL REFERENCES dim_city(id),
            customer_type INT NOT NULL REFERENCES dim_customer_type(id),
            gender INT NOT NULL REFERENCES dim_gender(id),
            product_line INT NOT NULL REFERENCES dim_product_line(id),
            unit_price DOUBLE PRECISION,
            quantity DOUBLE PRECISION,
            "tax_5%" DOUBLE PRECISION,
            total DOUBLE PRECISION,
            date DATE NOT NULL REFERENCES dim_date(date),
            time TIME NOT NULL REFERENCES dim_time(time),
            payment INT NOT NULL REFERENCES dim_payment(id),
            cogs DOUBLE PRECISION,
            gross_margin_percentage DOUBLE PRECISION,
            gross_income DOUBLE PRECISION,
            rating DOUBLE PRECISION);        
        , parameters: None
[2023-04-30 07:02:47,288] {postgres.py:94} INFO - NOTICE:  schema "nds" already exists, skipping

[2023-04-30 07:02:47,294] {postgres.py:94} INFO - NOTICE:  schema "stage" already exists, skipping

[2023-04-30 07:02:47,301] {postgres.py:94} INFO - NOTICE:  relation "dim_time" already exists, skipping

[2023-04-30 07:02:47,309] {postgres.py:94} INFO - NOTICE:  relation "dim_date" already exists, skipping

[2023-04-30 07:02:47,311] {postgres.py:94} INFO - NOTICE:  relation "dim_branch" already exists, skipping

[2023-04-30 07:02:47,313] {postgres.py:94} INFO - NOTICE:  relation "dim_city" already exists, skipping

[2023-04-30 07:02:47,317] {postgres.py:94} INFO - NOTICE:  relation "dim_customer_type" already exists, skipping

[2023-04-30 07:02:47,328] {postgres.py:94} INFO - NOTICE:  relation "dim_gender" already exists, skipping

[2023-04-30 07:02:47,329] {postgres.py:94} INFO - NOTICE:  relation "dim_product_line" already exists, skipping

[2023-04-30 07:02:47,330] {postgres.py:94} INFO - NOTICE:  relation "dim_payment" already exists, skipping

[2023-04-30 07:02:47,332] {postgres.py:94} INFO - NOTICE:  relation "fact_sales" already exists, skipping

[2023-04-30 07:02:48,672] {taskinstance.py:1400} INFO - Marking task as SUCCESS. dag_id=dag_etl, task_id=create_nds_tables_if_not_exists, execution_date=20230427T000000, start_date=20230430T070242, end_date=20230430T070248
[2023-04-30 07:02:49,035] {local_task_job.py:156} INFO - Task exited with return code 0
[2023-04-30 07:02:49,866] {local_task_job.py:273} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2023-04-30 11:59:20,983] {taskinstance.py:1159} INFO - Dependencies all met for <TaskInstance: dag_etl.create_nds_tables_if_not_exists scheduled__2023-04-27T00:00:00+00:00 [queued]>
[2023-04-30 11:59:21,213] {taskinstance.py:1159} INFO - Dependencies all met for <TaskInstance: dag_etl.create_nds_tables_if_not_exists scheduled__2023-04-27T00:00:00+00:00 [queued]>
[2023-04-30 11:59:21,216] {taskinstance.py:1356} INFO - 
--------------------------------------------------------------------------------
[2023-04-30 11:59:21,217] {taskinstance.py:1357} INFO - Starting attempt 1 of 6
[2023-04-30 11:59:21,218] {taskinstance.py:1358} INFO - 
--------------------------------------------------------------------------------
[2023-04-30 11:59:21,689] {taskinstance.py:1377} INFO - Executing <Task(PostgresOperator): create_nds_tables_if_not_exists> on 2023-04-27 00:00:00+00:00
[2023-04-30 11:59:21,719] {standard_task_runner.py:52} INFO - Started process 523 to run task
[2023-04-30 11:59:21,776] {standard_task_runner.py:79} INFO - Running: ['***', 'tasks', 'run', 'dag_etl', 'create_nds_tables_if_not_exists', 'scheduled__2023-04-27T00:00:00+00:00', '--job-id', '242', '--raw', '--subdir', 'DAGS_FOLDER/dag_etl_taskflow.py', '--cfg-path', '/tmp/tmp1hl2x5bm', '--error-file', '/tmp/tmpg_68lj90']
[2023-04-30 11:59:21,788] {standard_task_runner.py:80} INFO - Job 242: Subtask create_nds_tables_if_not_exists
[2023-04-30 11:59:23,139] {task_command.py:370} INFO - Running <TaskInstance: dag_etl.create_nds_tables_if_not_exists scheduled__2023-04-27T00:00:00+00:00 [running]> on host 295d97741f96
[2023-04-30 11:59:25,605] {taskinstance.py:1571} INFO - Exporting the following env vars:
AIRFLOW_CTX_DAG_OWNER=Victor
AIRFLOW_CTX_DAG_ID=dag_etl
AIRFLOW_CTX_TASK_ID=create_nds_tables_if_not_exists
AIRFLOW_CTX_EXECUTION_DATE=2023-04-27T00:00:00+00:00
AIRFLOW_CTX_TRY_NUMBER=1
AIRFLOW_CTX_DAG_RUN_ID=scheduled__2023-04-27T00:00:00+00:00
[2023-04-30 11:59:26,042] {base.py:68} INFO - Using connection ID 'postgres_conn' for task execution.
[2023-04-30 11:59:26,139] {dbapi.py:213} INFO - Running statement: 
            CREATE SCHEMA IF NOT EXISTS nds;
            CREATE SCHEMA IF NOT EXISTS stage;
    
            SET search_path TO nds;        
            
            --// создаем таблицу с ветками //--
            CREATE TABLE IF NOT EXISTS dim_branch(
            id SERIAL PRIMARY KEY,
            branch VARCHAR(100) NOT NULL);
            
            --// создаем таблицу с городами //--
            CREATE TABLE IF NOT EXISTS dim_city(
            id SERIAL PRIMARY KEY,
            city VARCHAR(100) NOT NULL);
            
            --// создаем таблицу с типами клиентов //--
            CREATE TABLE IF NOT EXISTS dim_customer_type(
            id SERIAL PRIMARY KEY,
            customer_type VARCHAR(200) NOT NULL);
            
            --// создаем таблицу с гендерами //--
            CREATE TABLE IF NOT EXISTS dim_gender(
            id SERIAL PRIMARY KEY,
            gender VARCHAR(200) NOT NULL);
            
            --// создаем таблицу с продуктовыми линейками //--
            CREATE TABLE IF NOT EXISTS dim_product_line(
            id SERIAL PRIMARY KEY,
            product_line VARCHAR(200) NOT NULL);
            
            --// создаем таблицу с видами оплат //--
            CREATE TABLE IF NOT EXISTS dim_payment(
            id SERIAL PRIMARY KEY,
            payment VARCHAR(100) NOT NULL);
            
            --// создаем таблицу с фактами //--       
            CREATE TABLE IF NOT EXISTS fact_sales(
            invoice_id VARCHAR(15) PRIMARY KEY,
            branch INT NOT NULL REFERENCES dim_branch(id),
            city INT NOT NULL REFERENCES dim_city(id),
            customer_type INT NOT NULL REFERENCES dim_customer_type(id),
            gender INT NOT NULL REFERENCES dim_gender(id),
            product_line INT NOT NULL REFERENCES dim_product_line(id),
            unit_price DOUBLE PRECISION,
            quantity DOUBLE PRECISION,
            "tax_5%" DOUBLE PRECISION,
            total DOUBLE PRECISION,
            date DATE NOT NULL,
            time TIME NOT NULL,
            payment INT NOT NULL REFERENCES dim_payment(id),
            cogs DOUBLE PRECISION,
            gross_margin_percentage DOUBLE PRECISION,
            gross_income DOUBLE PRECISION,
            rating DOUBLE PRECISION);        
        , parameters: None
[2023-04-30 11:59:26,168] {postgres.py:94} INFO - NOTICE:  schema "nds" already exists, skipping

[2023-04-30 11:59:26,172] {postgres.py:94} INFO - NOTICE:  schema "stage" already exists, skipping

[2023-04-30 11:59:26,173] {postgres.py:94} INFO - NOTICE:  relation "dim_branch" already exists, skipping

[2023-04-30 11:59:26,174] {postgres.py:94} INFO - NOTICE:  relation "dim_city" already exists, skipping

[2023-04-30 11:59:26,174] {postgres.py:94} INFO - NOTICE:  relation "dim_customer_type" already exists, skipping

[2023-04-30 11:59:26,175] {postgres.py:94} INFO - NOTICE:  relation "dim_gender" already exists, skipping

[2023-04-30 11:59:26,181] {postgres.py:94} INFO - NOTICE:  relation "dim_product_line" already exists, skipping

[2023-04-30 11:59:26,182] {postgres.py:94} INFO - NOTICE:  relation "dim_payment" already exists, skipping

[2023-04-30 11:59:26,183] {postgres.py:94} INFO - NOTICE:  relation "fact_sales" already exists, skipping

[2023-04-30 11:59:27,891] {taskinstance.py:1400} INFO - Marking task as SUCCESS. dag_id=dag_etl, task_id=create_nds_tables_if_not_exists, execution_date=20230427T000000, start_date=20230430T115921, end_date=20230430T115927
[2023-04-30 11:59:28,286] {local_task_job.py:156} INFO - Task exited with return code 0
[2023-04-30 11:59:29,913] {local_task_job.py:273} INFO - 2 downstream tasks scheduled from follow-on schedule check
[2023-04-30 15:49:17,867] {taskinstance.py:1159} INFO - Dependencies all met for <TaskInstance: dag_etl.create_nds_tables_if_not_exists scheduled__2023-04-27T00:00:00+00:00 [queued]>
[2023-04-30 15:49:18,371] {taskinstance.py:1159} INFO - Dependencies all met for <TaskInstance: dag_etl.create_nds_tables_if_not_exists scheduled__2023-04-27T00:00:00+00:00 [queued]>
[2023-04-30 15:49:18,374] {taskinstance.py:1356} INFO - 
--------------------------------------------------------------------------------
[2023-04-30 15:49:18,376] {taskinstance.py:1357} INFO - Starting attempt 1 of 6
[2023-04-30 15:49:18,379] {taskinstance.py:1358} INFO - 
--------------------------------------------------------------------------------
[2023-04-30 15:49:19,559] {taskinstance.py:1377} INFO - Executing <Task(PostgresOperator): create_nds_tables_if_not_exists> on 2023-04-27 00:00:00+00:00
[2023-04-30 15:49:19,687] {standard_task_runner.py:52} INFO - Started process 1012 to run task
[2023-04-30 15:49:19,710] {standard_task_runner.py:79} INFO - Running: ['***', 'tasks', 'run', 'dag_etl', 'create_nds_tables_if_not_exists', 'scheduled__2023-04-27T00:00:00+00:00', '--job-id', '316', '--raw', '--subdir', 'DAGS_FOLDER/dag_etl_taskflow.py', '--cfg-path', '/tmp/tmp2zy_d1xn', '--error-file', '/tmp/tmpbm4yb640']
[2023-04-30 15:49:19,739] {standard_task_runner.py:80} INFO - Job 316: Subtask create_nds_tables_if_not_exists
[2023-04-30 15:49:23,161] {task_command.py:370} INFO - Running <TaskInstance: dag_etl.create_nds_tables_if_not_exists scheduled__2023-04-27T00:00:00+00:00 [running]> on host 295d97741f96
[2023-04-30 15:49:30,291] {taskinstance.py:1571} INFO - Exporting the following env vars:
AIRFLOW_CTX_DAG_OWNER=Victor
AIRFLOW_CTX_DAG_ID=dag_etl
AIRFLOW_CTX_TASK_ID=create_nds_tables_if_not_exists
AIRFLOW_CTX_EXECUTION_DATE=2023-04-27T00:00:00+00:00
AIRFLOW_CTX_TRY_NUMBER=1
AIRFLOW_CTX_DAG_RUN_ID=scheduled__2023-04-27T00:00:00+00:00
[2023-04-30 15:49:30,715] {base.py:68} INFO - Using connection ID 'postgres_conn' for task execution.
[2023-04-30 15:49:30,926] {dbapi.py:213} INFO - Running statement: 
            CREATE SCHEMA IF NOT EXISTS nds;
            CREATE SCHEMA IF NOT EXISTS stage;
    
            SET search_path TO nds;        
            
            --// создаем таблицу с ветками //--
            CREATE TABLE IF NOT EXISTS dim_branch(
            id SERIAL PRIMARY KEY,
            branch VARCHAR(100) NOT NULL);
            
            --// создаем таблицу с городами //--
            CREATE TABLE IF NOT EXISTS dim_city(
            id SERIAL PRIMARY KEY,
            city VARCHAR(100) NOT NULL);
            
            --// создаем таблицу с типами клиентов //--
            CREATE TABLE IF NOT EXISTS dim_customer_type(
            id SERIAL PRIMARY KEY,
            customer_type VARCHAR(200) NOT NULL);
            
            --// создаем таблицу с гендерами //--
            CREATE TABLE IF NOT EXISTS dim_gender(
            id SERIAL PRIMARY KEY,
            gender VARCHAR(200) NOT NULL);
            
            --// создаем таблицу с продуктовыми линейками //--
            CREATE TABLE IF NOT EXISTS dim_product_line(
            id SERIAL PRIMARY KEY,
            product_line VARCHAR(200) NOT NULL);
            
            --// создаем таблицу с видами оплат //--
            CREATE TABLE IF NOT EXISTS dim_payment(
            id SERIAL PRIMARY KEY,
            payment VARCHAR(100) NOT NULL);
            
            --// создаем таблицу с фактами //--       
            CREATE TABLE IF NOT EXISTS fact_sales(
            invoice_id VARCHAR(15) PRIMARY KEY,
            branch INT NOT NULL REFERENCES dim_branch(id),
            city INT NOT NULL REFERENCES dim_city(id),
            customer_type INT NOT NULL REFERENCES dim_customer_type(id),
            gender INT NOT NULL REFERENCES dim_gender(id),
            product_line INT NOT NULL REFERENCES dim_product_line(id),
            unit_price DOUBLE PRECISION,
            quantity DOUBLE PRECISION,
            "tax_5%" DOUBLE PRECISION,
            total DOUBLE PRECISION,
            date DATE NOT NULL,
            time TIME NOT NULL,
            payment INT NOT NULL REFERENCES dim_payment(id),
            cogs DOUBLE PRECISION,
            gross_margin_percentage DOUBLE PRECISION,
            gross_income DOUBLE PRECISION,
            rating DOUBLE PRECISION);        
        , parameters: None
[2023-04-30 15:49:30,970] {postgres.py:94} INFO - NOTICE:  schema "nds" already exists, skipping

[2023-04-30 15:49:30,973] {postgres.py:94} INFO - NOTICE:  schema "stage" already exists, skipping

[2023-04-30 15:49:30,975] {postgres.py:94} INFO - NOTICE:  relation "dim_branch" already exists, skipping

[2023-04-30 15:49:30,976] {postgres.py:94} INFO - NOTICE:  relation "dim_city" already exists, skipping

[2023-04-30 15:49:30,978] {postgres.py:94} INFO - NOTICE:  relation "dim_customer_type" already exists, skipping

[2023-04-30 15:49:30,980] {postgres.py:94} INFO - NOTICE:  relation "dim_gender" already exists, skipping

[2023-04-30 15:49:30,981] {postgres.py:94} INFO - NOTICE:  relation "dim_product_line" already exists, skipping

[2023-04-30 15:49:30,982] {postgres.py:94} INFO - NOTICE:  relation "dim_payment" already exists, skipping

[2023-04-30 15:49:30,983] {postgres.py:94} INFO - NOTICE:  relation "fact_sales" already exists, skipping

[2023-04-30 15:49:31,594] {taskinstance.py:1400} INFO - Marking task as SUCCESS. dag_id=dag_etl, task_id=create_nds_tables_if_not_exists, execution_date=20230427T000000, start_date=20230430T154917, end_date=20230430T154931
[2023-04-30 15:49:32,114] {local_task_job.py:156} INFO - Task exited with return code 0
[2023-04-30 15:49:33,664] {local_task_job.py:273} INFO - 2 downstream tasks scheduled from follow-on schedule check
[2023-05-02 10:37:40,149] {taskinstance.py:1159} INFO - Dependencies all met for <TaskInstance: dag_etl.create_nds_tables_if_not_exists scheduled__2023-04-27T00:00:00+00:00 [queued]>
[2023-05-02 10:37:40,508] {taskinstance.py:1159} INFO - Dependencies all met for <TaskInstance: dag_etl.create_nds_tables_if_not_exists scheduled__2023-04-27T00:00:00+00:00 [queued]>
[2023-05-02 10:37:40,514] {taskinstance.py:1356} INFO - 
--------------------------------------------------------------------------------
[2023-05-02 10:37:40,515] {taskinstance.py:1357} INFO - Starting attempt 1 of 6
[2023-05-02 10:37:40,517] {taskinstance.py:1358} INFO - 
--------------------------------------------------------------------------------
[2023-05-02 10:37:41,381] {taskinstance.py:1377} INFO - Executing <Task(PostgresOperator): create_nds_tables_if_not_exists> on 2023-04-27 00:00:00+00:00
[2023-05-02 10:37:41,439] {standard_task_runner.py:52} INFO - Started process 977 to run task
[2023-05-02 10:37:41,519] {standard_task_runner.py:79} INFO - Running: ['***', 'tasks', 'run', 'dag_etl', 'create_nds_tables_if_not_exists', 'scheduled__2023-04-27T00:00:00+00:00', '--job-id', '428', '--raw', '--subdir', 'DAGS_FOLDER/dag_etl_taskflow.py', '--cfg-path', '/tmp/tmpmsi9_t7_', '--error-file', '/tmp/tmpy02slnia']
[2023-05-02 10:37:41,535] {standard_task_runner.py:80} INFO - Job 428: Subtask create_nds_tables_if_not_exists
[2023-05-02 10:37:43,395] {task_command.py:370} INFO - Running <TaskInstance: dag_etl.create_nds_tables_if_not_exists scheduled__2023-04-27T00:00:00+00:00 [running]> on host 295d97741f96
[2023-05-02 10:37:52,567] {taskinstance.py:1571} INFO - Exporting the following env vars:
AIRFLOW_CTX_DAG_OWNER=Victor
AIRFLOW_CTX_DAG_ID=dag_etl
AIRFLOW_CTX_TASK_ID=create_nds_tables_if_not_exists
AIRFLOW_CTX_EXECUTION_DATE=2023-04-27T00:00:00+00:00
AIRFLOW_CTX_TRY_NUMBER=1
AIRFLOW_CTX_DAG_RUN_ID=scheduled__2023-04-27T00:00:00+00:00
[2023-05-02 10:37:53,197] {base.py:68} INFO - Using connection ID 'postgres_conn' for task execution.
[2023-05-02 10:37:53,380] {dbapi.py:213} INFO - Running statement: 
            CREATE SCHEMA IF NOT EXISTS dds;
            CREATE SCHEMA IF NOT EXISTS nds;
    
            SET search_path TO dds;        
            
            --// создаем таблицу с ветками //--
            CREATE TABLE IF NOT EXISTS dim_branch(
            id SERIAL PRIMARY KEY,
            branch VARCHAR(100) NOT NULL);
            
            --// создаем таблицу с городами //--
            CREATE TABLE IF NOT EXISTS dim_city(
            id SERIAL PRIMARY KEY,
            city VARCHAR(100) NOT NULL);
            
            --// создаем таблицу с типами клиентов //--
            CREATE TABLE IF NOT EXISTS dim_customer_type(
            id SERIAL PRIMARY KEY,
            customer_type VARCHAR(200) NOT NULL);
            
            --// создаем таблицу с гендерами //--
            CREATE TABLE IF NOT EXISTS dim_gender(
            id SERIAL PRIMARY KEY,
            gender VARCHAR(200) NOT NULL);
            
            --// создаем таблицу с продуктовыми линейками //--
            CREATE TABLE IF NOT EXISTS dim_product_line(
            id SERIAL PRIMARY KEY,
            product_line VARCHAR(200) NOT NULL);
            
            --// создаем таблицу с видами оплат //--
            CREATE TABLE IF NOT EXISTS dim_payment(
            id SERIAL PRIMARY KEY,
            payment VARCHAR(100) NOT NULL);
            
            --// создаем таблицу с фактами //--       
            CREATE TABLE IF NOT EXISTS fact_sales(
            invoice_id VARCHAR(15) PRIMARY KEY,
            branch INT NOT NULL REFERENCES dim_branch(id),
            city INT NOT NULL REFERENCES dim_city(id),
            customer_type INT NOT NULL REFERENCES dim_customer_type(id),
            gender INT NOT NULL REFERENCES dim_gender(id),
            product_line INT NOT NULL REFERENCES dim_product_line(id),
            unit_price DOUBLE PRECISION,
            quantity DOUBLE PRECISION,
            "tax_5%" DOUBLE PRECISION,
            total DOUBLE PRECISION,
            date DATE NOT NULL,
            time TIME NOT NULL,
            payment INT NOT NULL REFERENCES dim_payment(id),
            cogs DOUBLE PRECISION,
            gross_margin_percentage DOUBLE PRECISION,
            gross_income DOUBLE PRECISION,
            rating DOUBLE PRECISION);        
        , parameters: None
[2023-05-02 10:37:53,419] {postgres.py:94} INFO - NOTICE:  schema "dds" already exists, skipping

[2023-05-02 10:37:53,427] {postgres.py:94} INFO - NOTICE:  schema "nds" already exists, skipping

[2023-05-02 10:37:53,428] {postgres.py:94} INFO - NOTICE:  relation "dim_branch" already exists, skipping

[2023-05-02 10:37:53,429] {postgres.py:94} INFO - NOTICE:  relation "dim_city" already exists, skipping

[2023-05-02 10:37:53,430] {postgres.py:94} INFO - NOTICE:  relation "dim_customer_type" already exists, skipping

[2023-05-02 10:37:53,431] {postgres.py:94} INFO - NOTICE:  relation "dim_gender" already exists, skipping

[2023-05-02 10:37:53,431] {postgres.py:94} INFO - NOTICE:  relation "dim_product_line" already exists, skipping

[2023-05-02 10:37:53,432] {postgres.py:94} INFO - NOTICE:  relation "dim_payment" already exists, skipping

[2023-05-02 10:37:53,439] {postgres.py:94} INFO - NOTICE:  relation "fact_sales" already exists, skipping

[2023-05-02 10:37:55,964] {taskinstance.py:1400} INFO - Marking task as SUCCESS. dag_id=dag_etl, task_id=create_nds_tables_if_not_exists, execution_date=20230427T000000, start_date=20230502T103740, end_date=20230502T103755
[2023-05-02 10:37:56,627] {local_task_job.py:156} INFO - Task exited with return code 0
[2023-05-02 10:37:58,258] {local_task_job.py:273} INFO - 2 downstream tasks scheduled from follow-on schedule check
