[2023-05-02 15:13:59,243] {taskinstance.py:1159} INFO - Dependencies all met for <TaskInstance: dag_etl_date.create_dds_tables_if_not_exists manual__2023-05-02T15:13:48.299245+00:00 [queued]>
[2023-05-02 15:13:59,328] {taskinstance.py:1159} INFO - Dependencies all met for <TaskInstance: dag_etl_date.create_dds_tables_if_not_exists manual__2023-05-02T15:13:48.299245+00:00 [queued]>
[2023-05-02 15:13:59,329] {taskinstance.py:1356} INFO - 
--------------------------------------------------------------------------------
[2023-05-02 15:13:59,330] {taskinstance.py:1357} INFO - Starting attempt 1 of 6
[2023-05-02 15:13:59,331] {taskinstance.py:1358} INFO - 
--------------------------------------------------------------------------------
[2023-05-02 15:13:59,436] {taskinstance.py:1377} INFO - Executing <Task(PostgresOperator): create_dds_tables_if_not_exists> on 2023-05-02 15:13:48.299245+00:00
[2023-05-02 15:13:59,455] {standard_task_runner.py:52} INFO - Started process 1627 to run task
[2023-05-02 15:13:59,463] {standard_task_runner.py:79} INFO - Running: ['***', 'tasks', 'run', 'dag_etl_date', 'create_dds_tables_if_not_exists', 'manual__2023-05-02T15:13:48.299245+00:00', '--job-id', '685', '--raw', '--subdir', 'DAGS_FOLDER/dag_etl_taskflow_date.py', '--cfg-path', '/tmp/tmp6nr4du_8', '--error-file', '/tmp/tmpjmjlp519']
[2023-05-02 15:13:59,466] {standard_task_runner.py:80} INFO - Job 685: Subtask create_dds_tables_if_not_exists
[2023-05-02 15:13:59,937] {task_command.py:370} INFO - Running <TaskInstance: dag_etl_date.create_dds_tables_if_not_exists manual__2023-05-02T15:13:48.299245+00:00 [running]> on host 295d97741f96
[2023-05-02 15:14:00,668] {taskinstance.py:1571} INFO - Exporting the following env vars:
AIRFLOW_CTX_DAG_OWNER=Victor
AIRFLOW_CTX_DAG_ID=dag_etl_date
AIRFLOW_CTX_TASK_ID=create_dds_tables_if_not_exists
AIRFLOW_CTX_EXECUTION_DATE=2023-05-02T15:13:48.299245+00:00
AIRFLOW_CTX_TRY_NUMBER=1
AIRFLOW_CTX_DAG_RUN_ID=manual__2023-05-02T15:13:48.299245+00:00
[2023-05-02 15:14:00,751] {base.py:68} INFO - Using connection ID 'postgres_conn' for task execution.
[2023-05-02 15:14:00,790] {dbapi.py:213} INFO - Running statement: 
            CREATE SCHEMA IF NOT EXISTS dds;
            CREATE SCHEMA IF NOT EXISTS nds;
    
            SET search_path TO dds;        
            
            --// создаем таблицу с ветками //--
            CREATE TABLE IF NOT EXISTS dim_branch(
            id SERIAL PRIMARY KEY,
            branch VARCHAR(100) NOT NULL);
            
            --// создаем таблицу с городами //--
            CREATE TABLE IF NOT EXISTS dim_city(
            id SERIAL PRIMARY KEY,
            city VARCHAR(100) NOT NULL);
            
            --// создаем таблицу с типами клиентов //--
            CREATE TABLE IF NOT EXISTS dim_customer_type(
            id SERIAL PRIMARY KEY,
            customer_type VARCHAR(200) NOT NULL);
            
            --// создаем таблицу с гендерами //--
            CREATE TABLE IF NOT EXISTS dim_gender(
            id SERIAL PRIMARY KEY,
            gender VARCHAR(200) NOT NULL);
            
            --// создаем таблицу с продуктовыми линейками //--
            CREATE TABLE IF NOT EXISTS dim_product_line(
            id SERIAL PRIMARY KEY,
            product_line VARCHAR(200) NOT NULL);
            
            --// создаем таблицу с видами оплат //--
            CREATE TABLE IF NOT EXISTS dim_payment(
            id SERIAL PRIMARY KEY,
            payment VARCHAR(100) NOT NULL);
            
            --// создаем таблицу с датами //--
            CREATE TABLE IF NOT EXISTS dim_date AS
            WITH cte1 AS (
                SELECT dd::date AS dt -- создаем серию из дат с интервалом в 1 день
                FROM generate_series('2019-01-01'::timestamp,'2030-01-01'::timestamp,'1 day'::interval) dd)
            SELECT
                dt AS date,
                date_part('week', dt)::int AS week_of_year,
                date_trunc('week', dt)::date AS week_start,
                date_part('isodow', dt)::int AS day_of_week,
                date_part('month', dt)::int AS month_number,
                to_char(dt::timestamp, 'Month') AS month_name,
                extract(quarter from dt) AS quarter,
                date_part('isoyear', dt)::int AS year
            FROM cte1;
            ALTER TABLE dim_date ADD PRIMARY KEY (date);
            
            
            --//  создаем таблицу с временем  //--
            CREATE TABLE IF NOT EXISTS dim_time AS
            WITH cte1 AS (
                SELECT tt::time AS t -- создаем серию из дат с интервалом в 1 день
                FROM generate_series(current_date, current_date + '1 day - 1 second'::interval,'1 minute') tt),
            cte2 AS (SELECT
                t AS time
            FROM cte1 ORDER BY t)
            SELECT time,
                   case
                       when (time >= '00:00:00'::time AND time < '06:00:00'::time) then 'ningt'
                       when (time >= '06:00:00'::time AND time < '11:00:00'::time) then 'morning'
                       when (time >= '11:00:00'::time AND time < '17:00:00'::time) then 'noon'
                       when (time >= '17:00:00'::time AND time < '22:00:00'::time) then 'evening'
                       when (time >= '22:00:00'::time AND time < '24:00:00'::time) then 'ningt'
                   end AS date_part
            from cte2;
            ALTER TABLE dim_time ADD PRIMARY KEY (time);
           
            --// создаем таблицу с фактами //--       
            CREATE TABLE IF NOT EXISTS fact_sales(
            invoice_id VARCHAR(15) PRIMARY KEY,
            branch INT NOT NULL REFERENCES dim_branch(id),
            city INT NOT NULL REFERENCES dim_city(id),
            customer_type INT NOT NULL REFERENCES dim_customer_type(id),
            gender INT NOT NULL REFERENCES dim_gender(id),
            product_line INT NOT NULL REFERENCES dim_product_line(id),
            unit_price DOUBLE PRECISION,
            quantity DOUBLE PRECISION,
            "tax_5%" DOUBLE PRECISION,
            total DOUBLE PRECISION,
            date DATE NOT NULL REFERENCES dim_date(date),
            time TIME NOT NULL REFERENCES dim_time(time),
            payment INT NOT NULL REFERENCES dim_payment(id),
            cogs DOUBLE PRECISION,
            gross_margin_percentage DOUBLE PRECISION,
            gross_income DOUBLE PRECISION,
            rating DOUBLE PRECISION);        
        , parameters: None
[2023-05-02 15:14:00,823] {taskinstance.py:1889} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.7/site-packages/airflow/providers/postgres/operators/postgres.py", line 92, in execute
    self.hook.run(self.sql, self.autocommit, parameters=self.parameters)
  File "/home/airflow/.local/lib/python3.7/site-packages/airflow/hooks/dbapi.py", line 193, in run
    self._run_command(cur, sql_statement, parameters)
  File "/home/airflow/.local/lib/python3.7/site-packages/airflow/hooks/dbapi.py", line 217, in _run_command
    cur.execute(sql_statement)
psycopg2.errors.InvalidTableDefinition: multiple primary keys for table "dim_date" are not allowed

[2023-05-02 15:14:00,913] {taskinstance.py:1400} INFO - Marking task as UP_FOR_RETRY. dag_id=dag_etl_date, task_id=create_dds_tables_if_not_exists, execution_date=20230502T151348, start_date=20230502T151359, end_date=20230502T151400
[2023-05-02 15:14:00,995] {standard_task_runner.py:97} ERROR - Failed to execute job 685 for task create_dds_tables_if_not_exists (multiple primary keys for table "dim_date" are not allowed
; 1627)
[2023-05-02 15:14:01,060] {local_task_job.py:156} INFO - Task exited with return code 1
[2023-05-02 15:14:01,380] {local_task_job.py:273} INFO - 0 downstream tasks scheduled from follow-on schedule check
